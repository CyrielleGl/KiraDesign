1158f053b1a0e961a36b858696c1ce0d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const forms_1 = require("@angular/forms");
const rxjs_1 = require("rxjs");
const test_module_1 = require("../../../test.module");
const account_service_1 = require("app/core/auth/account.service");
const settings_component_1 = require("app/account/settings/settings.component");
describe('Component Tests', () => {
    describe('SettingsComponent', () => {
        let comp;
        let fixture;
        let mockAuth;
        const accountValues = {
            firstName: 'John',
            lastName: 'Doe',
            activated: true,
            email: 'john.doe@mail.com',
            langKey: 'fr',
            login: 'john',
            authorities: [],
            imageUrl: '',
        };
        beforeEach(testing_1.async(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.KiraTestModule],
                declarations: [settings_component_1.SettingsComponent],
                providers: [forms_1.FormBuilder],
            })
                .overrideTemplate(settings_component_1.SettingsComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(settings_component_1.SettingsComponent);
            comp = fixture.componentInstance;
            mockAuth = testing_1.TestBed.get(account_service_1.AccountService);
            mockAuth.setIdentityResponse(accountValues);
        });
        it('should send the current identity upon save', () => {
            // GIVEN
            mockAuth.saveSpy.and.returnValue(rxjs_1.of({}));
            const settingsFormValues = {
                firstName: 'John',
                lastName: 'Doe',
                email: 'john.doe@mail.com',
                langKey: 'fr',
            };
            // WHEN
            comp.ngOnInit();
            comp.save();
            // THEN
            expect(mockAuth.identitySpy).toHaveBeenCalled();
            expect(mockAuth.saveSpy).toHaveBeenCalledWith(accountValues);
            expect(mockAuth.authenticateSpy).toHaveBeenCalledWith(accountValues);
            expect(comp.settingsForm.value).toEqual(settingsFormValues);
        });
        it('should notify of success upon successful save', () => {
            // GIVEN
            mockAuth.saveSpy.and.returnValue(rxjs_1.of({}));
            // WHEN
            comp.ngOnInit();
            comp.save();
            // THEN
            expect(comp.success).toBe(true);
        });
        it('should notify of error upon failed save', () => {
            // GIVEN
            mockAuth.saveSpy.and.returnValue(rxjs_1.throwError('ERROR'));
            // WHEN
            comp.ngOnInit();
            comp.save();
            // THEN
            expect(comp.success).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXDEuUFJPR1JBTU1BVElPTlxcSkhJUFNURVJcXGtpcmFcXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxhY2NvdW50XFxzZXR0aW5nc1xcc2V0dGluZ3MuY29tcG9uZW50LnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBeUU7QUFDekUsMENBQTZDO0FBQzdDLCtCQUFzQztBQUV0QyxzREFBc0Q7QUFDdEQsbUVBQStEO0FBRS9ELGdGQUE0RTtBQUc1RSxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDakMsSUFBSSxJQUF1QixDQUFDO1FBQzVCLElBQUksT0FBNEMsQ0FBQztRQUNqRCxJQUFJLFFBQTRCLENBQUM7UUFDakMsTUFBTSxhQUFhLEdBQVk7WUFDN0IsU0FBUyxFQUFFLE1BQU07WUFDakIsUUFBUSxFQUFFLEtBQUs7WUFDZixTQUFTLEVBQUUsSUFBSTtZQUNmLEtBQUssRUFBRSxtQkFBbUI7WUFDMUIsT0FBTyxFQUFFLElBQUk7WUFDYixLQUFLLEVBQUUsTUFBTTtZQUNiLFdBQVcsRUFBRSxFQUFFO1lBQ2YsUUFBUSxFQUFFLEVBQUU7U0FDYixDQUFDO1FBRUYsVUFBVSxDQUFDLGVBQUssQ0FBQyxHQUFHLEVBQUU7WUFDcEIsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztnQkFDN0IsT0FBTyxFQUFFLENBQUMsNEJBQWMsQ0FBQztnQkFDekIsWUFBWSxFQUFFLENBQUMsc0NBQWlCLENBQUM7Z0JBQ2pDLFNBQVMsRUFBRSxDQUFDLG1CQUFXLENBQUM7YUFDekIsQ0FBQztpQkFDQyxnQkFBZ0IsQ0FBQyxzQ0FBaUIsRUFBRSxFQUFFLENBQUM7aUJBQ3ZDLGlCQUFpQixFQUFFLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVKLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMsc0NBQWlCLENBQUMsQ0FBQztZQUNyRCxJQUFJLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1lBQ2pDLFFBQVEsR0FBRyxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBYyxDQUFDLENBQUM7WUFDdkMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDRDQUE0QyxFQUFFLEdBQUcsRUFBRTtZQUNwRCxRQUFRO1lBQ1IsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sa0JBQWtCLEdBQUc7Z0JBQ3pCLFNBQVMsRUFBRSxNQUFNO2dCQUNqQixRQUFRLEVBQUUsS0FBSztnQkFDZixLQUFLLEVBQUUsbUJBQW1CO2dCQUMxQixPQUFPLEVBQUUsSUFBSTthQUNkLENBQUM7WUFFRixPQUFPO1lBQ1AsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVaLE9BQU87WUFDUCxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDaEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM3RCxNQUFNLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3JFLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLCtDQUErQyxFQUFFLEdBQUcsRUFBRTtZQUN2RCxRQUFRO1lBQ1IsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRXpDLE9BQU87WUFDUCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDaEIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBRVosT0FBTztZQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtZQUNqRCxRQUFRO1lBQ1IsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLGlCQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUV0RCxPQUFPO1lBQ1AsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVaLE9BQU87WUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRDpcXDEuUFJPR1JBTU1BVElPTlxcSkhJUFNURVJcXGtpcmFcXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxhY2NvdW50XFxzZXR0aW5nc1xcc2V0dGluZ3MuY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCwgYXN5bmMgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyB0aHJvd0Vycm9yLCBvZiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBLaXJhVGVzdE1vZHVsZSB9IGZyb20gJy4uLy4uLy4uL3Rlc3QubW9kdWxlJztcbmltcG9ydCB7IEFjY291bnRTZXJ2aWNlIH0gZnJvbSAnYXBwL2NvcmUvYXV0aC9hY2NvdW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgQWNjb3VudCB9IGZyb20gJ2FwcC9jb3JlL3VzZXIvYWNjb3VudC5tb2RlbCc7XG5pbXBvcnQgeyBTZXR0aW5nc0NvbXBvbmVudCB9IGZyb20gJ2FwcC9hY2NvdW50L3NldHRpbmdzL3NldHRpbmdzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNb2NrQWNjb3VudFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL21vY2stYWNjb3VudC5zZXJ2aWNlJztcblxuZGVzY3JpYmUoJ0NvbXBvbmVudCBUZXN0cycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ1NldHRpbmdzQ29tcG9uZW50JywgKCkgPT4ge1xuICAgIGxldCBjb21wOiBTZXR0aW5nc0NvbXBvbmVudDtcbiAgICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxTZXR0aW5nc0NvbXBvbmVudD47XG4gICAgbGV0IG1vY2tBdXRoOiBNb2NrQWNjb3VudFNlcnZpY2U7XG4gICAgY29uc3QgYWNjb3VudFZhbHVlczogQWNjb3VudCA9IHtcbiAgICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgICAgbGFzdE5hbWU6ICdEb2UnLFxuICAgICAgYWN0aXZhdGVkOiB0cnVlLFxuICAgICAgZW1haWw6ICdqb2huLmRvZUBtYWlsLmNvbScsXG4gICAgICBsYW5nS2V5OiAnZnInLFxuICAgICAgbG9naW46ICdqb2huJyxcbiAgICAgIGF1dGhvcml0aWVzOiBbXSxcbiAgICAgIGltYWdlVXJsOiAnJyxcbiAgICB9O1xuXG4gICAgYmVmb3JlRWFjaChhc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbS2lyYVRlc3RNb2R1bGVdLFxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtTZXR0aW5nc0NvbXBvbmVudF0sXG4gICAgICAgIHByb3ZpZGVyczogW0Zvcm1CdWlsZGVyXSxcbiAgICAgIH0pXG4gICAgICAgIC5vdmVycmlkZVRlbXBsYXRlKFNldHRpbmdzQ29tcG9uZW50LCAnJylcbiAgICAgICAgLmNvbXBpbGVDb21wb25lbnRzKCk7XG4gICAgfSkpO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoU2V0dGluZ3NDb21wb25lbnQpO1xuICAgICAgY29tcCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICBtb2NrQXV0aCA9IFRlc3RCZWQuZ2V0KEFjY291bnRTZXJ2aWNlKTtcbiAgICAgIG1vY2tBdXRoLnNldElkZW50aXR5UmVzcG9uc2UoYWNjb3VudFZhbHVlcyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNlbmQgdGhlIGN1cnJlbnQgaWRlbnRpdHkgdXBvbiBzYXZlJywgKCkgPT4ge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIG1vY2tBdXRoLnNhdmVTcHkuYW5kLnJldHVyblZhbHVlKG9mKHt9KSk7XG4gICAgICBjb25zdCBzZXR0aW5nc0Zvcm1WYWx1ZXMgPSB7XG4gICAgICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgICAgICBsYXN0TmFtZTogJ0RvZScsXG4gICAgICAgIGVtYWlsOiAnam9obi5kb2VAbWFpbC5jb20nLFxuICAgICAgICBsYW5nS2V5OiAnZnInLFxuICAgICAgfTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgY29tcC5uZ09uSW5pdCgpO1xuICAgICAgY29tcC5zYXZlKCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChtb2NrQXV0aC5pZGVudGl0eVNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tBdXRoLnNhdmVTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGFjY291bnRWYWx1ZXMpO1xuICAgICAgZXhwZWN0KG1vY2tBdXRoLmF1dGhlbnRpY2F0ZVNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoYWNjb3VudFZhbHVlcyk7XG4gICAgICBleHBlY3QoY29tcC5zZXR0aW5nc0Zvcm0udmFsdWUpLnRvRXF1YWwoc2V0dGluZ3NGb3JtVmFsdWVzKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90aWZ5IG9mIHN1Y2Nlc3MgdXBvbiBzdWNjZXNzZnVsIHNhdmUnLCAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgbW9ja0F1dGguc2F2ZVNweS5hbmQucmV0dXJuVmFsdWUob2Yoe30pKTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgY29tcC5uZ09uSW5pdCgpO1xuICAgICAgY29tcC5zYXZlKCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChjb21wLnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdGlmeSBvZiBlcnJvciB1cG9uIGZhaWxlZCBzYXZlJywgKCkgPT4ge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIG1vY2tBdXRoLnNhdmVTcHkuYW5kLnJldHVyblZhbHVlKHRocm93RXJyb3IoJ0VSUk9SJykpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBjb21wLm5nT25Jbml0KCk7XG4gICAgICBjb21wLnNhdmUoKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGNvbXAuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=