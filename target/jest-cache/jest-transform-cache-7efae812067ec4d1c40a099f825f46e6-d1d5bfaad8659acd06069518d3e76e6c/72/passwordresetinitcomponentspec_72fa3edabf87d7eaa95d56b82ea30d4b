7b252ac4f9fc090a31ad4c4ea721e8ae
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const forms_1 = require("@angular/forms");
const rxjs_1 = require("rxjs");
const test_module_1 = require("../../../../test.module");
const password_reset_init_component_1 = require("app/account/password-reset/init/password-reset-init.component");
const password_reset_init_service_1 = require("app/account/password-reset/init/password-reset-init.service");
describe('Component Tests', () => {
    describe('PasswordResetInitComponent', () => {
        let fixture;
        let comp;
        beforeEach(() => {
            fixture = testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.KiraTestModule],
                declarations: [password_reset_init_component_1.PasswordResetInitComponent],
                providers: [forms_1.FormBuilder],
            })
                .overrideTemplate(password_reset_init_component_1.PasswordResetInitComponent, '')
                .createComponent(password_reset_init_component_1.PasswordResetInitComponent);
            comp = fixture.componentInstance;
        });
        it('sets focus after the view has been initialized', () => {
            const node = {
                focus() { },
            };
            comp.email = new core_1.ElementRef(node);
            spyOn(node, 'focus');
            comp.ngAfterViewInit();
            expect(node.focus).toHaveBeenCalled();
        });
        it('notifies of success upon successful requestReset', testing_1.inject([password_reset_init_service_1.PasswordResetInitService], (service) => {
            spyOn(service, 'save').and.returnValue(rxjs_1.of({}));
            comp.resetRequestForm.patchValue({
                email: 'user@domain.com',
            });
            comp.requestReset();
            expect(service.save).toHaveBeenCalledWith('user@domain.com');
            expect(comp.success).toBe(true);
        }));
        it('no notification of success upon error response', testing_1.inject([password_reset_init_service_1.PasswordResetInitService], (service) => {
            spyOn(service, 'save').and.returnValue(rxjs_1.throwError({
                status: 503,
                data: 'something else',
            }));
            comp.resetRequestForm.patchValue({
                email: 'user@domain.com',
            });
            comp.requestReset();
            expect(service.save).toHaveBeenCalledWith('user@domain.com');
            expect(comp.success).toBe(false);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXDEuUFJPR1JBTU1BVElPTlxcSkhJUFNURVJcXGtpcmFcXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxhY2NvdW50XFxwYXNzd29yZC1yZXNldFxcaW5pdFxccGFzc3dvcmQtcmVzZXQtaW5pdC5jb21wb25lbnQuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLHdDQUEyQztBQUMzQyxtREFBMEU7QUFDMUUsMENBQTZDO0FBQzdDLCtCQUFzQztBQUV0Qyx5REFBeUQ7QUFDekQsaUhBQTJHO0FBQzNHLDZHQUF1RztBQUV2RyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7UUFDMUMsSUFBSSxPQUFxRCxDQUFDO1FBQzFELElBQUksSUFBZ0MsQ0FBQztRQUVyQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsT0FBTyxHQUFHLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7Z0JBQ3ZDLE9BQU8sRUFBRSxDQUFDLDRCQUFjLENBQUM7Z0JBQ3pCLFlBQVksRUFBRSxDQUFDLDBEQUEwQixDQUFDO2dCQUMxQyxTQUFTLEVBQUUsQ0FBQyxtQkFBVyxDQUFDO2FBQ3pCLENBQUM7aUJBQ0MsZ0JBQWdCLENBQUMsMERBQTBCLEVBQUUsRUFBRSxDQUFDO2lCQUNoRCxlQUFlLENBQUMsMERBQTBCLENBQUMsQ0FBQztZQUMvQyxJQUFJLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGdEQUFnRCxFQUFFLEdBQUcsRUFBRTtZQUN4RCxNQUFNLElBQUksR0FBRztnQkFDWCxLQUFLLEtBQVUsQ0FBQzthQUNqQixDQUFDO1lBQ0YsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGlCQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztZQUVyQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFFdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGtEQUFrRCxFQUFFLGdCQUFNLENBQUMsQ0FBQyxzREFBd0IsQ0FBQyxFQUFFLENBQUMsT0FBaUMsRUFBRSxFQUFFO1lBQzlILEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxTQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDO2dCQUMvQixLQUFLLEVBQUUsaUJBQWlCO2FBQ3pCLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUVwQixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDN0QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVKLEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxnQkFBTSxDQUFDLENBQUMsc0RBQXdCLENBQUMsRUFBRSxDQUFDLE9BQWlDLEVBQUUsRUFBRTtZQUM1SCxLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQ3BDLGlCQUFVLENBQUM7Z0JBQ1QsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsSUFBSSxFQUFFLGdCQUFnQjthQUN2QixDQUFDLENBQ0gsQ0FBQztZQUNGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUM7Z0JBQy9CLEtBQUssRUFBRSxpQkFBaUI7YUFDekIsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBRXBCLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUM3RCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJEOlxcMS5QUk9HUkFNTUFUSU9OXFxKSElQU1RFUlxca2lyYVxcc3JjXFx0ZXN0XFxqYXZhc2NyaXB0XFxzcGVjXFxhcHBcXGFjY291bnRcXHBhc3N3b3JkLXJlc2V0XFxpbml0XFxwYXNzd29yZC1yZXNldC1pbml0LmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IG9mLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEtpcmFUZXN0TW9kdWxlIH0gZnJvbSAnLi4vLi4vLi4vLi4vdGVzdC5tb2R1bGUnO1xuaW1wb3J0IHsgUGFzc3dvcmRSZXNldEluaXRDb21wb25lbnQgfSBmcm9tICdhcHAvYWNjb3VudC9wYXNzd29yZC1yZXNldC9pbml0L3Bhc3N3b3JkLXJlc2V0LWluaXQuY29tcG9uZW50JztcbmltcG9ydCB7IFBhc3N3b3JkUmVzZXRJbml0U2VydmljZSB9IGZyb20gJ2FwcC9hY2NvdW50L3Bhc3N3b3JkLXJlc2V0L2luaXQvcGFzc3dvcmQtcmVzZXQtaW5pdC5zZXJ2aWNlJztcblxuZGVzY3JpYmUoJ0NvbXBvbmVudCBUZXN0cycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ1Bhc3N3b3JkUmVzZXRJbml0Q29tcG9uZW50JywgKCkgPT4ge1xuICAgIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPFBhc3N3b3JkUmVzZXRJbml0Q29tcG9uZW50PjtcbiAgICBsZXQgY29tcDogUGFzc3dvcmRSZXNldEluaXRDb21wb25lbnQ7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbS2lyYVRlc3RNb2R1bGVdLFxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtQYXNzd29yZFJlc2V0SW5pdENvbXBvbmVudF0sXG4gICAgICAgIHByb3ZpZGVyczogW0Zvcm1CdWlsZGVyXSxcbiAgICAgIH0pXG4gICAgICAgIC5vdmVycmlkZVRlbXBsYXRlKFBhc3N3b3JkUmVzZXRJbml0Q29tcG9uZW50LCAnJylcbiAgICAgICAgLmNyZWF0ZUNvbXBvbmVudChQYXNzd29yZFJlc2V0SW5pdENvbXBvbmVudCk7XG4gICAgICBjb21wID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB9KTtcblxuICAgIGl0KCdzZXRzIGZvY3VzIGFmdGVyIHRoZSB2aWV3IGhhcyBiZWVuIGluaXRpYWxpemVkJywgKCkgPT4ge1xuICAgICAgY29uc3Qgbm9kZSA9IHtcbiAgICAgICAgZm9jdXMoKTogdm9pZCB7fSxcbiAgICAgIH07XG4gICAgICBjb21wLmVtYWlsID0gbmV3IEVsZW1lbnRSZWYobm9kZSk7XG4gICAgICBzcHlPbihub2RlLCAnZm9jdXMnKTtcblxuICAgICAgY29tcC5uZ0FmdGVyVmlld0luaXQoKTtcblxuICAgICAgZXhwZWN0KG5vZGUuZm9jdXMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdub3RpZmllcyBvZiBzdWNjZXNzIHVwb24gc3VjY2Vzc2Z1bCByZXF1ZXN0UmVzZXQnLCBpbmplY3QoW1Bhc3N3b3JkUmVzZXRJbml0U2VydmljZV0sIChzZXJ2aWNlOiBQYXNzd29yZFJlc2V0SW5pdFNlcnZpY2UpID0+IHtcbiAgICAgIHNweU9uKHNlcnZpY2UsICdzYXZlJykuYW5kLnJldHVyblZhbHVlKG9mKHt9KSk7XG4gICAgICBjb21wLnJlc2V0UmVxdWVzdEZvcm0ucGF0Y2hWYWx1ZSh7XG4gICAgICAgIGVtYWlsOiAndXNlckBkb21haW4uY29tJyxcbiAgICAgIH0pO1xuXG4gICAgICBjb21wLnJlcXVlc3RSZXNldCgpO1xuXG4gICAgICBleHBlY3Qoc2VydmljZS5zYXZlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgndXNlckBkb21haW4uY29tJyk7XG4gICAgICBleHBlY3QoY29tcC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgIH0pKTtcblxuICAgIGl0KCdubyBub3RpZmljYXRpb24gb2Ygc3VjY2VzcyB1cG9uIGVycm9yIHJlc3BvbnNlJywgaW5qZWN0KFtQYXNzd29yZFJlc2V0SW5pdFNlcnZpY2VdLCAoc2VydmljZTogUGFzc3dvcmRSZXNldEluaXRTZXJ2aWNlKSA9PiB7XG4gICAgICBzcHlPbihzZXJ2aWNlLCAnc2F2ZScpLmFuZC5yZXR1cm5WYWx1ZShcbiAgICAgICAgdGhyb3dFcnJvcih7XG4gICAgICAgICAgc3RhdHVzOiA1MDMsXG4gICAgICAgICAgZGF0YTogJ3NvbWV0aGluZyBlbHNlJyxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICBjb21wLnJlc2V0UmVxdWVzdEZvcm0ucGF0Y2hWYWx1ZSh7XG4gICAgICAgIGVtYWlsOiAndXNlckBkb21haW4uY29tJyxcbiAgICAgIH0pO1xuICAgICAgY29tcC5yZXF1ZXN0UmVzZXQoKTtcblxuICAgICAgZXhwZWN0KHNlcnZpY2Uuc2F2ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3VzZXJAZG9tYWluLmNvbScpO1xuICAgICAgZXhwZWN0KGNvbXAuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgfSkpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9